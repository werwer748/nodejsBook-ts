노드는 예외 처리가 정말 중요함. (예외란 보통 처리하지 못한 에러를 뜻한다)
이러한 예외들은 실행 중인 노드 프로세스를 멈추게 만든다.

멀티 스레드는 프로그램에서 스레드 하나가 멈추면 다른 스레드가 대신한다.
하지만 노드는 메인 스레드가 하나뿐이므로 메인 스레드가 에러로 인해 멈춘다는 것은 스레드를 갖고있는 프로세스가 멈춘다는 뜻이고,
전체서버도 멈춘다는 뜻과 같다.
따라서 에러를 처리하는 방법을 익혀둬야 한다. 에러 로그가 기록되더라도 작업은 진행될 수 있도록.

자주 발생하는 에러들

- node: command not found: 환경 변수가 제대로 설정되어 있지 않은 것이다.
환경 변수에는 노드가 설치된 경로가 포함되어야 한다.
다른 명령어도 마찬가지 인데 그 명령어를 수행할 수 있는 파일이 환경 변수에 들어 있어야 명령어를 콘솔에서 사용할 수 있다.

- ReferenceError: 모듈 is not defined: 모듈을 require했는지 확인한다.

- Error: Cannot find module 모듈명: 해당 모듈을 require했지만 설치하지 않은 경우

- Error [ERR_MODULE_NOT_FOUND]: 존재하지 않는 모듈을 불러오려 할 때 발생한다.

- Error: Can't set headers after they are sent: 요청에 대한 응답을 보낼 때 응답을 두 번 이상 보냄.
요청에 대한 응답은 한 번만 보내야 한다.

- FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed- JavaScript heap out of memory:
코드를 실행할 때 메모리가 부족해서 스크립트가 정상 작동하지 않는 경우.
코드가 잘못 구현되었을 확률이 높다. 만약 코드는 정상인데 노드가 활용할 수 있는 메모리가 부족한 경우라면 노드의 메모리를 늘릴 수 있다.
노드 실행 시 node --max-old-space-size=4096 파일명 같은 명령어를 사용하면 된다.(4096 = 4GB)

- UnhandledPromiseRejectionWarning: Unhandled promise rejection: 
프로미스 사용시 catch 메서드를 붙이지 않으면 발생한다.

- EADDRINUSE 포트번호: 해당 포트 번호에 이미 다른 프로세스가 연결되어 있다.
그 프로세스를 종료하거나 다른 포트 번호를 사용해야 한다.
[
    프로세스 종료
    - 윈도우:
    netstat -ano | findstr 포트 => 수행 결과 프로세스 아이디를 확인 => taskkill /pid 프로세스아이디 /f

    - 맥/리눅스:
    lsof -i tcp:포트 => 수행 결과 프로세스 아이디를 확인 => kill -9 프로세스아이디
]

- EACCES 또는 EPERN: 노드가 작업을 수행하는 데 권한이 충분치 않다.
파일/폴더 수정, 삭제, 생성 권한을 확인해 볼것. 맥이나 리눅스 운영체제라면 명령어 앞에 sudo를 붙이는 것도 방법이다.

- EJSONPARSE: package.json 등의 JSON 파일에 문법 오류가 있을 때 발생.

- ECONNREFUSED: 요청을 보냈으나 연결이 성립하지 않을 때 발생한다.

- ETARGET: 요청을 보냈으나 응답이 시간 내에 오지 않을 때 발생한다.

- ENOENT: no such file or directory: 지정한 폴더나 파일이 존재하지 않는 경우.
